//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scenes/BlockScene/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Block"",
            ""id"": ""da063ac7-79d5-47e5-9261-9c36fe103688"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""f1080c17-f291-4cee-a2fb-8daf79b5b2ca"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accept"",
                    ""type"": ""Button"",
                    ""id"": ""0deb1aff-be4c-48d5-a56e-8f6d93fa4e49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateAnalog"",
                    ""type"": ""Value"",
                    ""id"": ""2f601fc4-d2a4-4542-9361-a4db5c1a996e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateDigitalLeft"",
                    ""type"": ""Button"",
                    ""id"": ""b3e3765b-324f-44c2-b084-0b0d59b23d35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateDigitalRight"",
                    ""type"": ""Button"",
                    ""id"": ""605f1e52-478f-4cc2-9833-cc1b3af93262"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fbbdc6a9-a4d6-4141-afe9-3db22254761b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""530792c7-f50e-428d-bac1-4ed0778e3ab0"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b0797c84-4a16-456a-8053-c6c5740f4bef"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3a15196b-e917-40f5-99b7-e90066998747"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""424c7285-0543-4bc4-b251-3c0c77fdbe43"",
                    ""path"": ""<XInputController>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDigitalLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdd266e8-5a7e-43c2-a366-3364d294451f"",
                    ""path"": ""<XInputController>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDigitalRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2ced20b5-35de-4eed-b0d4-bb532a2e5d58"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAnalog"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c1bc5df7-44b6-49c4-8c8a-18df18c0d656"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAnalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""61398843-6e24-4ff6-8453-423d3dbdac5e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAnalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Block
        m_Block = asset.FindActionMap("Block", throwIfNotFound: true);
        m_Block_Horizontal = m_Block.FindAction("Horizontal", throwIfNotFound: true);
        m_Block_Accept = m_Block.FindAction("Accept", throwIfNotFound: true);
        m_Block_RotateAnalog = m_Block.FindAction("RotateAnalog", throwIfNotFound: true);
        m_Block_RotateDigitalLeft = m_Block.FindAction("RotateDigitalLeft", throwIfNotFound: true);
        m_Block_RotateDigitalRight = m_Block.FindAction("RotateDigitalRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Block
    private readonly InputActionMap m_Block;
    private IBlockActions m_BlockActionsCallbackInterface;
    private readonly InputAction m_Block_Horizontal;
    private readonly InputAction m_Block_Accept;
    private readonly InputAction m_Block_RotateAnalog;
    private readonly InputAction m_Block_RotateDigitalLeft;
    private readonly InputAction m_Block_RotateDigitalRight;
    public struct BlockActions
    {
        private @InputActions m_Wrapper;
        public BlockActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_Block_Horizontal;
        public InputAction @Accept => m_Wrapper.m_Block_Accept;
        public InputAction @RotateAnalog => m_Wrapper.m_Block_RotateAnalog;
        public InputAction @RotateDigitalLeft => m_Wrapper.m_Block_RotateDigitalLeft;
        public InputAction @RotateDigitalRight => m_Wrapper.m_Block_RotateDigitalRight;
        public InputActionMap Get() { return m_Wrapper.m_Block; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BlockActions set) { return set.Get(); }
        public void SetCallbacks(IBlockActions instance)
        {
            if (m_Wrapper.m_BlockActionsCallbackInterface != null)
            {
                @Horizontal.started -= m_Wrapper.m_BlockActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_BlockActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_BlockActionsCallbackInterface.OnHorizontal;
                @Accept.started -= m_Wrapper.m_BlockActionsCallbackInterface.OnAccept;
                @Accept.performed -= m_Wrapper.m_BlockActionsCallbackInterface.OnAccept;
                @Accept.canceled -= m_Wrapper.m_BlockActionsCallbackInterface.OnAccept;
                @RotateAnalog.started -= m_Wrapper.m_BlockActionsCallbackInterface.OnRotateAnalog;
                @RotateAnalog.performed -= m_Wrapper.m_BlockActionsCallbackInterface.OnRotateAnalog;
                @RotateAnalog.canceled -= m_Wrapper.m_BlockActionsCallbackInterface.OnRotateAnalog;
                @RotateDigitalLeft.started -= m_Wrapper.m_BlockActionsCallbackInterface.OnRotateDigitalLeft;
                @RotateDigitalLeft.performed -= m_Wrapper.m_BlockActionsCallbackInterface.OnRotateDigitalLeft;
                @RotateDigitalLeft.canceled -= m_Wrapper.m_BlockActionsCallbackInterface.OnRotateDigitalLeft;
                @RotateDigitalRight.started -= m_Wrapper.m_BlockActionsCallbackInterface.OnRotateDigitalRight;
                @RotateDigitalRight.performed -= m_Wrapper.m_BlockActionsCallbackInterface.OnRotateDigitalRight;
                @RotateDigitalRight.canceled -= m_Wrapper.m_BlockActionsCallbackInterface.OnRotateDigitalRight;
            }
            m_Wrapper.m_BlockActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Accept.started += instance.OnAccept;
                @Accept.performed += instance.OnAccept;
                @Accept.canceled += instance.OnAccept;
                @RotateAnalog.started += instance.OnRotateAnalog;
                @RotateAnalog.performed += instance.OnRotateAnalog;
                @RotateAnalog.canceled += instance.OnRotateAnalog;
                @RotateDigitalLeft.started += instance.OnRotateDigitalLeft;
                @RotateDigitalLeft.performed += instance.OnRotateDigitalLeft;
                @RotateDigitalLeft.canceled += instance.OnRotateDigitalLeft;
                @RotateDigitalRight.started += instance.OnRotateDigitalRight;
                @RotateDigitalRight.performed += instance.OnRotateDigitalRight;
                @RotateDigitalRight.canceled += instance.OnRotateDigitalRight;
            }
        }
    }
    public BlockActions @Block => new BlockActions(this);
    public interface IBlockActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnAccept(InputAction.CallbackContext context);
        void OnRotateAnalog(InputAction.CallbackContext context);
        void OnRotateDigitalLeft(InputAction.CallbackContext context);
        void OnRotateDigitalRight(InputAction.CallbackContext context);
    }
}
